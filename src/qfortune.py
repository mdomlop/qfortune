#!/usr/bin/env python3# QFortune: A pyQt5 interface for reading fortune cookies.# License: GPLv3+# Author: Manuel Domínguez López# Date: 2017import sysfrom PyQt5.QtWidgets import *from PyQt5.QtGui import *from PyQt5.QtCore import *import osimport gettextimport randomPROGRAM_NAME = 'qfortune'DESCRIPTION = 'A pyQt5 interface for reading fortune cookies'VERSION = '0.2a'AUTHOR = 'Manuel Domínguez López'  # See AUTHORS fileMAIL = 'mdomlop@gmail.com'LICENSE = 'GPLv3+'  # Read LICENSE file.epigrams = []  # Temp database containing fortune cookiesreaded = []  # Readed cookiessaved = []  # Saved cookies merged from savefile and fortune.savefile = os.path.join(os.getenv('HOME'), '.config/qfortune/qfortune.cookies')fortunes = '/usr/share/qfortune/fortunes'fortunes_off = '/usr/share/qfortune/fortunes/off'custom_fortunes = os.path.join(os.getenv("HOME"), '.config/qfortune/fortunes')custom_fortunes_off = os.path.join(os.getenv("HOME"),                        '.config/qfortune/fortunes/off')'''~/.config/qfortune/fortunes/off/~/.config/qfortune/fortunes/~/.config/qfortune/qfortune.cookies~/.config/qfortune/qfortunercoff'''def decrypt(s):  # Unix offensive fortunes are rot13 encoded    rot13 =str.maketrans(        'ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz',        'NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm')    return(str.translate(s, rot13))def loaddb(directory, offensive=False):    try:        files = os.listdir(directory)    except:        files = []    if files:  # Not empty        files = list(map(lambda x: os.path.join(directory, x), files))    for f in files:  # Loads to epigrams        if os.path.isfile(f):            if offensive:                loadfile(f, True)            else:                loadfile(f)        else:            print(f, _('is not a regular file.'))def loadfile(path, decode=False):    try:  # Populate epigrams with a fortune database file        with open(path, 'r') as f:            text = f.read()        for line in text.split('\n%\n'):            if decode:                line = decrypt(line)            epigrams.append(line)  # Do not line.strip() for match with original        f.close()    except PermissionError:        fixpermissions()def fixpermissions():    buttonReply = QMessageBox.question(w, _('QFortune: Question'),                            _('The database file: <p><pre>')                            + savefile                            + _('</pre><p>has incorrect permissions.<p>')                            + _('It will be a read/write file.<p>')                            + _('Do you want me to try to fix them?'),                            QMessageBox.Yes | QMessageBox.No,                            QMessageBox.Yes)    if buttonReply == QMessageBox.Yes:        try:            os.chmod(savefile, 0o644)            QMessageBox.information(w, _('QFortune: Information'),                                    _('Permissions fixed successfully'))        except Exception as e:            QMessageBox.warning(w, _('QFortune: Warning'),                                    _('I can not fix permissions.')                                    + _('<p>Error: <b>') + str(e.errno)                                    + _('</b><p>(<i>') + e.strerror                                    + _('</i>)<p><b>You must fix it manually.</b>')                                    + _("<p><p>You can't save the cookie."))            btn_save.setEnabled(False)def printcookie(i=-1):    txt.setText(epigrams[i])def func_btn_new():    global current    cookie = epigrams.pop()    readed.append(cookie)    index = len(readed) - 1    current = index    printcookie()    settitle(current)    disablebuttons(readed[current])  # Prevent repetitiondef func_btn_prev():    global current    if current == 0:        current = len(readed) - 1    else:        current = current - 1    printcookie(current)    settitle(current)    disablebuttons(readed[current])def func_btn_next():    global current    if current == len(readed) - 1:        current = 0    else:        current = current + 1    printcookie(current)    settitle(current)    disablebuttons(readed[current])def func_btn_save():    cookie = readed[current]    formatcookie = readed[current] + '\n%\n'    if cookie not in saved:        try:            with open(savefile, 'a') as mysavefile:                mysavefile.write(formatcookie)            saved.append(cookie)            disablebuttons(cookie)        except PermissionError:            fixpermissions()        except Exception as e:            fatal_exception(e.errno, e.strerror)def fatal_exception(errorcode, errortext):    QMessageBox.critical(w, _('QFortune: Critical error'),                            _('An unexpected error has happened.<p>')                            + _('Error code: <b>') + str(errorcode)                            + _('</b><p>')                            + _('Error message: <i>') + errortext                            + _('</i><p><p>The program will close.'))    sys.exit(exitcode)def func_btn_exit():    QCoreApplication.instance().quit()def settitle(index):    title = _('QFortune:') + ' ' + str(index + 1)    w.setWindowTitle(title)def disablebuttons(cookie):    # Save button:    if cookie in saved:        btn_save.setEnabled(False)    else:        btn_save.setEnabled(True)        btn_save.setIcon(QIcon.fromTheme('document-save'))        btn_save.setToolTip(_('Save the cookie in your database file'))        btn_save.setText(_('Save'))    # Prev button:    if len(readed) == 1:        btn_prev.setEnabled(False)        btn_next.setEnabled(False)    else:        btn_prev.setEnabled(True)        btn_next.setEnabled(True)def center_window(w):    # get screen width and height    resolution = QDesktopWidget().screenGeometry()    w.move((resolution.width() / 2) - (w.frameSize().width() / 2),           (resolution.height() / 2) - (w.frameSize().height() / 2))gettext.translation('qfortune', localedir='/usr/share/locale', fallback=True).install()app = QApplication(sys.argv)w = QWidget()txt = QTextEdit()txt.setReadOnly(True)btn_new = QPushButton(_('New cookie'), w, default=True)btn_new.setIcon(QIcon.fromTheme('document-new'))btn_new.setToolTip(_('Show new cookie'))btn_new.clicked.connect(func_btn_new)btn_next = QPushButton(_('Next'), w)btn_next.setIcon(QIcon.fromTheme('go-next'))btn_next.setToolTip(_('Show next cookie if available'))btn_next.clicked.connect(func_btn_next)btn_prev = QPushButton(_('Previous'), w)btn_prev.setIcon(QIcon.fromTheme('go-previous'))btn_prev.setToolTip(_('Show previous cookie if available'))btn_prev.clicked.connect(func_btn_prev)btn_save = QPushButton(_('Save'), w)btn_save.setIcon(QIcon.fromTheme('document-save'))btn_save.setToolTip(_('Save the cookie in your database file'))btn_save.clicked.connect(func_btn_save)btn_exit = QPushButton(_('Exit'), w)btn_exit.setIcon(QIcon.fromTheme('window-close'))btn_exit.setToolTip(_('Exit program'))btn_exit.clicked.connect(func_btn_exit)grid = QGridLayout()grid.addWidget(txt, 0, 0, 1, 5)grid.addWidget(btn_new, 1, 0)grid.addWidget(btn_prev, 1, 1)grid.addWidget(btn_next, 1, 2)grid.addWidget(btn_save, 1, 3)grid.addWidget(btn_exit, 1, 4)def main():    global current    for i in fortunes, custom_fortunes:        loaddb(i)    for i in fortunes_off, custom_fortunes_off:        loaddb(i, True)    w.setWindowTitle('QFortune')    w.setWindowIcon(QIcon.fromTheme('qfortune'))    w.resize(500, 200)    center_window(w)    w.setLayout(grid)    w.show()    func_btn_new()    sys.exit(app.exec_())if __name__ == '__main__':    main()